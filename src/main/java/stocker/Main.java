package stocker;
// TODO add package.info files to all packages
import stocker.data.MainDataFetcher;
import stocker.data.fetchers.wScrape.FirstNorthScraper;
import stocker.data.fetchers.wScrape.LargeCapScraper;
import stocker.data.fetchers.wScrape.MidCapScraper;
import stocker.data.fetchers.wScrape.SmallCapScraper;
import stocker.database.CandlestickDao;
import stocker.data.parsers.BaseParser;
import stocker.data.fetchers.wJson.JsonConstants;
import stocker.data.parsers.TestParser;
import stocker.representation.Candlestick;
import stocker.representation.Stock;
import stocker.security.Authenticator;
import stocker.support.StockAppLogger;

import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import static stocker.data.fetchers.wJson.JsonConstants.*;

/**
 * At this point this class is used only when developing the first version of the program that will be used
 * when fetching all price data from the Yahoo finance API and then adding it to the database.
 *
 * One program (this version of main) is used to fetch a single one-day price data candlestick and then add it
 * to the database, This program shall be executed as a cron job.
 *
 * @author Joakim Colloz / Nineones
 * @version 1.0
 */
public class Main {
//    public static void main(String[] args) throws Exception {
////        testNewParser();
//        testGetSingleCandleStick();
////        testAddCandlestickToDb();
////        testStockDataFetcher();
//    }

    // TODO WORK IN PROGRESS!
    // TODO this is the version of main that is used to fetch a single day price data! This is done for only two stocks! AAK and ABB.
    public static void main(String... args) {
        MainDataFetcher mainDataFetcher = new MainDataFetcher();
        mainDataFetcher.init();
//        mainDataFetcher.addHistoricalStockDataToDb(List.of("AAK", "ABB"));
        mainDataFetcher.addCurrentDaysStockDataToDb(List.of("AAK", "ABB"));
//        System.out.printf("Program executed automatically at: %s", DateT);
        StockAppLogger.INSTANCE.logInfo(String.format(
                "Program automatically executed at: %s", getFormattedCurrentDateTime()));
    }

    private static String getFormattedCurrentDateTime() {
        ZonedDateTime zonedDateTime = ZonedDateTime.now();
        DateTimeFormatter zonedFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");
        return zonedDateTime.format(zonedFormatter);
    }

    private static void testGetSingleCandleStick() {
        Stock aak = new Stock("BOL.ST", ONE_DAY, ONE_DAY);
        aak.getTradingPeriod().getCandlesticks().forEach(candlestick -> {
            System.out.println(candlestick.getTimestamp());
            System.out.println(candlestick);
        });
        System.out.println(aak.getSymbol());
    }

    public static void testNewParser() {
//        final String jsonString = "{\"chart\":{\"result\":[{\"meta\":{\"currency\":\"SEK\",\"symbol\":\"ABB.ST\",\"exchangeName\":\"STO\",\"instrumentType\":\"EQUITY\",\"firstTradeDate\":989305200,\"regularMarketTime\":1690977174,\"gmtoffset\":7200,\"timezone\":\"CEST\",\"exchangeTimezoneName\":\"Europe/Stockholm\",\"regularMarketPrice\":417.5,\"chartPreviousClose\":353.5,\"priceHint\":2,\"currentTradingPeriod\":{\"pre\":{\"timezone\":\"CEST\",\"end\":1690959600,\"start\":1690959600,\"gmtoffset\":7200},\"regular\":{\"timezone\":\"CEST\",\"end\":1690990200,\"start\":1690959600,\"gmtoffset\":7200},\"post\":{\"timezone\":\"CEST\",\"end\":1690990200,\"start\":1690990200,\"gmtoffset\":7200}},\"dataGranularity\":\"1d\",\"range\":\"6mo\",\"validRanges\":[\"1d\",\"5d\",\"1mo\",\"3mo\",\"6mo\",\"1y\",\"2y\",\"5y\",\"10y\",\"ytd\",\"max\"]},\"timestamp\":[1675324800,1675411200,1675670400,1675756800,1675843200,1675929600,1676016000,1676275200,1676361600,1676448000,1676534400,1676620800,1676880000,1676966400,1677052800,1677139200,1677225600,1677484800,1677571200,1677657600,1677744000,1677830400,1678089600,1678176000,1678262400,1678348800,1678435200,1678694400,1678780800,1678867200,1678953600,1679040000,1679299200,1679385600,1679472000,1679558400,1679644800,1679900400,1679986800,1680073200,1680159600,1680246000,1680505200,1680591600,1680678000,1680764400,1681196400,1681282800,1681369200,1681455600,1681714800,1681801200,1681887600,1681974000,1682060400,1682319600,1682406000,1682492400,1682578800,1682665200,1683010800,1683097200,1683183600,1683270000,1683529200,1683615600,1683702000,1683788400,1683874800,1684134000,1684220400,1684306800,1684479600,1684738800,1684825200,1684911600,1684998000,1685084400,1685343600,1685430000,1685516400,1685602800,1685689200,1685948400,1686121200,1686207600,1686294000,1686553200,1686639600,1686726000,1686812400,1686898800,1687158000,1687244400,1687330800,1687417200,1687762800,1687849200,1687935600,1688022000,1688108400,1688367600,1688454000,1688540400,1688626800,1688713200,1688972400,1689058800,1689145200,1689231600,1689318000,1689577200,1689663600,1689750000,1689836400,1689922800,1690182000,1690268400,1690354800,1690441200,1690527600,1690786800,1690873200,1690977174],\"indicators\":{\"quote\":[{\"close\":[353.5,362.20001220703125,359.1000061035156,356.8999938964844,353.20001220703125,349.70001220703125,349.0,353.1000061035156,350.3999938964844,358.0,355.79998779296875,356.20001220703125,352.29998779296875,347.20001220703125,348.29998779296875,350.6000061035156,346.5,348.79998779296875,348.3999938964844,349.20001220703125,350.70001220703125,354.3999938964844,357.3999938964844,360.5,361.79998779296875,367.70001220703125,359.0,349.79998779296875,353.0,337.20001220703125,340.79998779296875,335.0,338.70001220703125,344.3999938964844,347.5,348.3999938964844,340.5,333.79998779296875,334.3999938964844,340.6000061035156,349.8999938964844,356.29998779296875,356.6000061035156,351.29998779296875,345.0,343.0,354.29998779296875,357.6000061035156,357.0,363.5,365.3999938964844,366.6000061035156,363.5,363.3999938964844,364.70001220703125,366.0,380.1000061035156,369.70001220703125,370.70001220703125,370.29998779296875,368.70001220703125,370.29998779296875,367.1000061035156,365.3999938964844,367.5,371.8999938964844,373.5,379.79998779296875,383.20001220703125,382.79998779296875,382.3999938964844,383.8999938964844,396.20001220703125,395.1000061035156,393.0,388.1000061035156,395.8999938964844,401.5,401.6000061035156,405.3999938964844,null,400.8999938964844,403.5,406.79998779296875,408.0,410.0,414.20001220703125,413.3999938964844,416.6000061035156,420.70001220703125,420.70001220703125,422.20001220703125,422.70001220703125,419.0,414.6000061035156,411.1000061035156,412.6000061035156,416.79998779296875,421.1000061035156,416.3999938964844,424.1000061035156,419.0,414.29998779296875,414.6000061035156,411.79998779296875,409.0,408.8999938964844,408.0,410.5,404.1000061035156,404.79998779296875,404.1000061035156,406.0,400.20001220703125,414.1000061035156,419.70001220703125,423.0,421.5,419.29998779296875,426.5,422.3999938964844,421.20001220703125,416.79998779296875,417.5],\"volume\":[2242197,1042143,627101,1449696,939800,1179036,580691,619184,1085641,1433227,625201,820880,405595,661659,595218,536219,683728,406393,390202,594836,448487,403236,461344,716806,895207,686863,936771,1206781,980691,1216467,1024634,1240359,2061164,1038823,791310,784751,1380098,779668,611393,848888,897456,1054869,853024,701153,516578,288225,692149,925674,776044,704182,607991,869014,577344,518677,662180,630842,2650375,1198828,837150,856277,594145,750795,832404,771954,484979,989825,835466,784774,1118732,493565,527710,181285,835672,583439,871137,552881,1447204,649638,271959,767714,null,729649,623306,523252,596734,751876,543447,577719,867622,751237,966689,466904,1344966,797270,502801,747254,591617,444321,597906,776333,608035,493886,786996,333040,1133962,396554,359459,372338,543909,375675,422060,438262,417149,583594,1161045,673872,508508,482810,397945,633965,436853,281411,505368,665902],\"low\":[346.1000061035156,350.1000061035156,357.3999938964844,356.8999938964844,353.20001220703125,348.20001220703125,346.0,350.20001220703125,349.6000061035156,350.0,354.0,351.1000061035156,351.0,345.3999938964844,344.8999938964844,347.20001220703125,345.0,347.70001220703125,344.20001220703125,348.5,346.6000061035156,351.20001220703125,355.70001220703125,357.70001220703125,360.29998779296875,361.6000061035156,357.20001220703125,348.0,347.1000061035156,337.20001220703125,332.70001220703125,334.70001220703125,331.20001220703125,338.3999938964844,343.5,341.0,335.29998779296875,331.29998779296875,333.3999938964844,336.5,345.1000061035156,349.70001220703125,354.70001220703125,350.79998779296875,343.70001220703125,341.70001220703125,345.0,354.0,353.6000061035156,357.3999938964844,363.20001220703125,363.79998779296875,361.79998779296875,362.3999938964844,361.1000061035156,364.79998779296875,373.1000061035156,367.20001220703125,365.79998779296875,367.29998779296875,367.20001220703125,369.20001220703125,365.79998779296875,362.70001220703125,364.6000061035156,365.8999938964844,370.70001220703125,374.5,379.29998779296875,380.6000061035156,380.70001220703125,380.8999938964844,389.79998779296875,389.8999938964844,391.6000061035156,384.29998779296875,387.6000061035156,396.3999938964844,400.3999938964844,401.1000061035156,null,397.5,398.0,403.8999938964844,406.0,406.20001220703125,409.6000061035156,411.3999938964844,414.6000061035156,416.6000061035156,416.70001220703125,419.3999938964844,419.70001220703125,416.79998779296875,413.8999938964844,405.20001220703125,406.1000061035156,411.3999938964844,419.1000061035156,414.0,415.6000061035156,416.79998779296875,413.5,412.20001220703125,409.5,407.5,405.70001220703125,406.70001220703125,408.70001220703125,403.6000061035156,402.5,400.79998779296875,401.5,396.5,394.20001220703125,411.70001220703125,417.3999938964844,415.1000061035156,416.79998779296875,415.70001220703125,419.79998779296875,420.20001220703125,416.79998779296875,412.79998779296875],\"high\":[359.5,362.5,363.70001220703125,363.3999938964844,362.1000061035156,359.29998779296875,349.20001220703125,353.1000061035156,353.1000061035156,358.0,361.20001220703125,356.8999938964844,357.8999938964844,352.70001220703125,349.20001220703125,351.79998779296875,351.8999938964844,350.8999938964844,350.29998779296875,352.3999938964844,351.20001220703125,354.8999938964844,358.79998779296875,360.8999938964844,363.3999938964844,368.8999938964844,365.29998779296875,357.6000061035156,354.3999938964844,351.29998779296875,342.20001220703125,345.1000061035156,340.20001220703125,344.3999938964844,348.79998779296875,348.3999938964844,347.8999938964844,337.6000061035156,336.1000061035156,341.29998779296875,350.1000061035156,356.29998779296875,358.70001220703125,358.79998779296875,351.0,346.29998779296875,354.29998779296875,357.6000061035156,361.20001220703125,364.1000061035156,366.70001220703125,367.6000061035156,364.79998779296875,365.20001220703125,365.79998779296875,368.0,380.70001220703125,378.70001220703125,372.5,375.1000061035156,370.79998779296875,372.79998779296875,370.29998779296875,368.1000061035156,369.0,371.8999938964844,374.70001220703125,380.29998779296875,384.29998779296875,384.70001220703125,384.20001220703125,384.5,398.79998779296875,395.79998779296875,394.3999938964844,390.20001220703125,398.29998779296875,401.8999938964844,404.29998779296875,408.1000061035156,null,401.6000061035156,404.1000061035156,408.3999938964844,408.8999938964844,411.5,414.20001220703125,416.6000061035156,419.20001220703125,421.70001220703125,424.29998779296875,423.0,423.20001220703125,422.79998779296875,421.5,412.8999938964844,413.1000061035156,416.79998779296875,425.29998779296875,421.0,425.3999938964844,424.8999938964844,420.29998779296875,415.5,418.3999938964844,411.79998779296875,409.3999938964844,411.20001220703125,412.1000061035156,410.3999938964844,407.29998779296875,406.1000061035156,406.0,407.1000061035156,414.70001220703125,422.8999938964844,424.0,422.5,423.1000061035156,429.70001220703125,425.29998779296875,423.5,423.6000061035156,419.1000061035156],\"open\":[354.29998779296875,352.5,362.0,361.79998779296875,362.1000061035156,356.0,347.20001220703125,350.20001220703125,353.1000061035156,350.3999938964844,359.0,355.6000061035156,356.3999938964844,352.1000061035156,347.0,348.29998779296875,350.79998779296875,348.1000061035156,347.1000061035156,349.20001220703125,348.0,352.3999938964844,355.79998779296875,357.8999938964844,360.70001220703125,361.8999938964844,362.1000061035156,357.0,349.79998779296875,350.79998779296875,339.20001220703125,345.1000061035156,334.0,340.70001220703125,343.5,347.29998779296875,347.79998779296875,337.6000061035156,334.79998779296875,336.5,345.1000061035156,350.0,356.5,357.5,351.0,346.1000061035156,345.0,354.20001220703125,357.6000061035156,360.0,364.5,365.5,364.1000061035156,363.1000061035156,364.0,366.1000061035156,375.20001220703125,378.0,369.70001220703125,373.5,370.29998779296875,369.79998779296875,370.0,367.79998779296875,366.6000061035156,370.1000061035156,373.5,374.5,380.79998779296875,384.70001220703125,382.79998779296875,381.0,391.3999938964844,389.8999938964844,393.0,390.20001220703125,388.0,396.8999938964844,402.0,402.1000061035156,null,398.79998779296875,402.5,404.0,407.20001220703125,407.5,410.6000061035156,414.20001220703125,416.20001220703125,418.3999938964844,419.79998779296875,422.0,422.0,422.70001220703125,419.0,412.8999938964844,410.29998779296875,412.0,419.29998779296875,421.0,418.0,423.5,419.5,413.5,414.6000061035156,411.79998779296875,407.5,409.79998779296875,408.79998779296875,410.3999938964844,402.5,404.79998779296875,404.1000061035156,406.6000061035156,394.8999938964844,415.1000061035156,418.8999938964844,420.3999938964844,421.8999938964844,419.79998779296875,425.0,420.79998779296875,421.20001220703125,418.20001220703125]}],\"adjclose\":[{\"adjclose\":[352.6279296875,361.3064880371094,358.214111328125,356.01953125,352.32867431640625,348.8373107910156,348.1390380859375,352.2289123535156,349.5355529785156,357.1168212890625,354.9222412109375,355.3212890625,351.4308776855469,346.3434753417969,347.44073486328125,349.7350769042969,345.64520263671875,347.93951416015625,347.5404968261719,348.3385314941406,349.8348388671875,353.52569580078125,356.518310546875,359.61065673828125,360.9074401855469,366.79290771484375,358.1143493652344,348.9370422363281,352.129150390625,336.3681335449219,339.959228515625,334.1735534667969,337.86444091796875,343.55035400390625,346.6427307128906,347.5404968261719,339.6600036621094,333.79998779296875,334.3999938964844,340.6000061035156,349.8999938964844,356.29998779296875,356.6000061035156,351.29998779296875,345.0,343.0,354.29998779296875,357.6000061035156,357.0,363.5,365.3999938964844,366.6000061035156,363.5,363.3999938964844,364.70001220703125,366.0,380.1000061035156,369.70001220703125,370.70001220703125,370.29998779296875,368.70001220703125,370.29998779296875,367.1000061035156,365.3999938964844,367.5,371.8999938964844,373.5,379.79998779296875,383.20001220703125,382.79998779296875,382.3999938964844,383.8999938964844,396.20001220703125,395.1000061035156,393.0,388.1000061035156,395.8999938964844,401.5,401.6000061035156,405.3999938964844,null,400.8999938964844,403.5,406.79998779296875,408.0,410.0,414.20001220703125,413.3999938964844,416.6000061035156,420.70001220703125,420.70001220703125,422.20001220703125,422.70001220703125,419.0,414.6000061035156,411.1000061035156,412.6000061035156,416.79998779296875,421.1000061035156,416.3999938964844,424.1000061035156,419.0,414.29998779296875,414.6000061035156,411.79998779296875,409.0,408.8999938964844,408.0,410.5,404.1000061035156,404.79998779296875,404.1000061035156,406.0,400.20001220703125,414.1000061035156,419.70001220703125,423.0,421.5,419.29998779296875,426.5,422.3999938964844,421.20001220703125,416.79998779296875,417.5]}]}}],\"error\":null}}";
        final String jsonString = "{\"map\": \"key\"}";
        BaseParser parser = new TestParser(jsonString);
        parser.parse();
    }

    // TODO test fetch all existing data for one stock
    // TODO check if the candle timestamps are correct. (maybe last one has wrong date?

    // TODO create method for fetching all data, one for adding it to db.
    // TODO next, craete method for fetching the last/newest candle. Check its timestamp. correct if necessary.
    private static void testStockDataFetcher() throws Exception {
        Stock boliden = new Stock("BOL.ST", ONE_MONTH, ONE_DAY);
        boliden.getTradingPeriod().printTradingPeriod();
    }

    private static void testDbConnection() {
        CandlestickDao candlestickDao = new CandlestickDao();
        List<Candlestick> candlesticks = candlestickDao.getAllRows();
        candlesticks.forEach(System.out::println);
    }

    public static void testAddCandlestickToDb() throws Exception {
        Stock hm_b = new Stock("HM-B.ST", ONE_DAY, ONE_DAY);
        CandlestickDao candlestickDao = new CandlestickDao();
        candlestickDao.addRows(hm_b.getSymbol(), hm_b.getTradingPeriod().getCandlesticks());
    }
    public static void scrapeAllInfo() {
        LargeCapScraper largeCapScraper = new LargeCapScraper();
        MidCapScraper midCapScraper = new MidCapScraper();
        FirstNorthScraper firstNorthScraper = new FirstNorthScraper();
        SmallCapScraper smallCapScraper = new SmallCapScraper();
    }
}